import puts, fork, exit, wait, system, getpid, sched_yield,
	pipe, dup2, execlp, close, read, write,
	access, chdir, chmod, creat, remove,
	setuid, setgid, setrlimit;
import pthread_* from "libpthread.so.0";

import List from "ptrslibs/list.ptrs";
import SocketSet from "ptrslibs/socket.ptrs";
import setTimeout, clearTimeout from "ptrslibs/timeout.ptrs";

const MAX_TIME = 3000;
const MAX_PROCS = 120;
const PATH = "/home/play";
const GROUP_ID = 1000;
const USER_ID = 1000;
const USER_NAME = "play";

const R_OK = 4;
const SIGKILL = 9;
const RLIMIT_NPROC = 6;
const RLIMIT_NOFILE = 7;
const RLIMIT_AS = 9;

struct pipearg
{
	readfd : int;
	writefd : int;
};
struct rlimit
{
	soft : u64;
	hard : u64;
};

struct RunningProcess
{
	id;
	pid;
	pipefd;
	timeout;
	timeoutKill = false;

	constructor(_id, _pid, _pipefd, _timeout)
	{
		id = _id;
		pid = _pid;
		pipefd = _pipefd;
		timeout = _timeout;
	}
};

var buff{4096};
var lock{64};
var fdset;
var procs;

function waiter(sendfd)
{
	while(true)
	{
		var pid = wait!i32(NULL);
		if(pid < 0)
			return; //no processes left -> the waiter is done

		pthread_mutex_lock(lock);

		var proc = procs.find((p) -> p.pid == pid);
		if(!proc)
		{
			pthread_mutex_unlock(lock);
			continue;
		}

		var len;
		while((len = read!ssize(proc.pipefd, buff, 4095)) > 0)
		{
			write(sendfd, &proc.id, sizeof(pointer));
			write(sendfd, buff, len);
		}

		if(proc.timeoutKill)
		{
			write(sendfd, &proc.id, sizeof(pointer));
			var msg = "Timeout, killed all processes";
			write(sendfd, msg, sizeof msg - 1);
		}

		fdset.remove(proc.pipefd);
		close(proc.pipefd);
		remove("$PATH/play$pid.ptrs");

		write(sendfd, &proc.id, sizeof(pointer));
		write(sendfd, "ready", 5);

		procs.remove(proc);
		delete proc;

		pthread_mutex_unlock(lock);
	}
}

function timeoutProc(pid)
{
	var proc = procs.find((p) -> p.pid == pid);

	if(proc)
	{
		//unfortunately using kill on the process tree is kind of bugged
		//I assume its because the watchdog is somehow attached into the lxc
		//but is not child of the lxc's init process.
		//kill(-proc.pid, SIGKILL);

		proc.timeoutKill = true;
		system("killall -9 -u $USER_NAME");
	}
}

function watchdog(sendfd, receivefd)
{
	pthread_mutex_init(lock, NULL);
	pthread_mutex_lock(lock);

	var thread = 0;
	fdset = new SocketSet();
	procs = new List();
	fdset.add(receivefd);

	while(true) scoped
	{
		pthread_mutex_unlock(lock);

		var fd = false;
		while(!fd)
			try fd = fdset.check();

		pthread_mutex_lock(lock);

		if(fd == receivefd)
		{
			var id = 0;
			if(read!ssize(receivefd, &id, sizeof(pointer)) != sizeof(pointer))
				throw "read error";

			var len = read!ssize(receivefd, buff, 4096);
			if(len <= 0)
				throw "read error";

			if(procs.find((p) -> p.id == id))
				continue;

			var pipes : pipearg();
			pipe(pipes);

			var pid = fork!i32();
			if(pid == 0)
			{
				pid = getpid();

				close(pipes.readfd);
				dup2(pipes.writefd, 1);
				dup2(pipes.writefd, 2);

				var limit : rlimit();
				limit.soft = 0x2000000; //32MB
				limit.hard = 0x2000000;
				setrlimit(RLIMIT_AS, limit);
				limit.soft = MAX_PROCS;
				limit.hard = MAX_PROCS;
				setrlimit(RLIMIT_NPROC, limit);
				limit.soft = 8;
				limit.hard = 8;
				setrlimit(RLIMIT_NOFILE, limit);

				if(setgid!int(GROUP_ID) != 0 || setuid!int(USER_ID) != 0)
					throw "setgid/setuid failed";

				chdir(PATH);
				var file = "$PATH/play$pid.ptrs";

				while(access!int(file, R_OK) != 0)
					sched_yield();

				execlp("ptrs", "ptrs", file, NULL);

				import perror;
				perror("execlp");
				puts("execlp failed");
				exit(1);
			}
			else
			{
				close(pipes.writefd);

				var file = "$PATH/play$pid.ptrs";
				fd = creat(file, 0600); //rw- --- ---
				write(fd, buff, len);
				close(fd);

				if(procs.length == 0)
					pthread_create(&thread, NULL, waiter, sendfd);

				var job = setTimeout(timeoutProc, MAX_TIME, pid);
				procs.add(new RunningProcess(id, pid, pipes.readfd, job));
				fdset.add(pipes.readfd);

				write(sendfd, &id, sizeof(pointer));
				write(sendfd, "running", 7);
				chmod(file, 0644); //rw- r-- r--
			}
		}
		else
		{
			var proc = procs.find((p) -> p.pipefd == fd);

			var count = read!ssize(fd, buff, 4095);
			if(count <= 0)
				throw "read error";

			write(sendfd, &proc.id, sizeof(pointer));
			write(sendfd, buff, count);
		}
	}
}
